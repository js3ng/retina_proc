%%%%%%% RETINA EMULATION USING .AVI %%%%%%% 

clear;clc;  

in = '../../example_video/fil_cat.avi';
% in = '../john_data/ATIS/00193.avi';
% in = '../john_data/DAVIS/1/Tom1.avi';
height = 128;
width = 96;
nFrames = 150;
in_dat = double(readVideo_rs(in, height, width, nFrames)); %read in video file specified by path for other specified parameters

%270x360 as well
%180x240

%%%set model modes%%%
filtMode = 4; %LPF mode - 1: 4NN average, 2: 9NN average, 3: 9member Gaussian, 4: adjustable Gaussian
sh_mode = 1; %1: LPF, 2: HPF, 3: NF
enDiv = 1; %partion filtering
divMode = [4 1; 2 1; 4 1;1 3]; %first col: fMode, second col: shMode
gaussSize = 7; %NxN Gaussian
std = 2; 
%write out-mode
arrW = 2; %array write
figW = 0; %figure write

%random initial frame
init_spatial = rand(size(in_dat,1),size(in_dat,2))*255;
% init_spatial =  zeros(size(in_dat,1),size(in_dat,2));

%%%introduce non-uniformities%%%
%threshold nu
thresh1_mean = 10;
thresh1_var = 0;
thresh1_arr = normrnd(thresh1_mean,thresh1_var, size(in_dat(:,:,1)));
thresh2_mean = -10;
thresh2_var = 0;
thresh2_arr = normrnd(thresh2_mean,thresh2_var, size(in_dat(:,:,1)));
%pixel nu
pix_mean = 0;
pix_var = 0;
pix_nu = normrnd(pix_mean,pix_var, size(in_dat(:,:,1))); 
%dead/sat pixels
deadPix=zeros(height,width);
r=rand(height,width);
deadPixPR = .999;  %1-deadPixPR percent of pixels = dead
deadPix = (r<(1-deadPixPR)/2);
satPix=zeros(height,width);
r=rand(height,width);
satPixPR = .999;  %1-satPixPR percent of pixels = stuck high
satPix = (r<(1-satPixPR)/2);

for ii = 1:nFrames
    in_var = in_dat(:,:,ii) + pix_nu;
    in_var(deadPix) = 0; 
    in_var(satPix) = 255; 
    outFrame = zeros(size(in_dat,1),size(in_dat,2));
    p = zeros(floor(size(in_dat,1)/2)+2,floor(size(in_dat,2)/2)+2,4);
    if enDiv == 1
        p(:,:,1) = padarray(in_var(1:floor(size(in_dat,1)/2),1:floor(size(in_dat,2)/2)),[1 1],0);
        p(:,:,2) = padarray(in_var(1:floor(size(in_dat,1)/2),ceil(size(in_dat,2)/2)+1:end),[1 1], 0);
        p(:,:,3) = padarray(in_var(ceil(size(in_dat,1)/2)+1:end,1:floor(size(in_dat,2)/2)),[1 1], 0);
        p(:,:,4) = padarray(in_var(ceil(size(in_dat,1)/2)+1:end,ceil(size(in_dat,2)/2)+1:end),[1 1], 0);
        for jj = 1:4
            if divMode(jj,1) == 1
                lowFilt = [0 1/8 0; 1/8 1/2 1/8; 0 1/8 0];
            elseif divMode(jj,1) == 2
                lowFilt = 1/16*[1 2 1; 1 2 1; 1 2 1];
            elseif divMode(jj,1) == 3
                lowFilt = 1/9*[1 1 1; 1 1 1; 1 1 1];
            elseif divMode(jj,1) == 4
                lowFilt = fspecial('gaussian',gaussSize, std);
            end
            if divMode(jj,2) == 1
                p_f(:,:,jj) = imfilter(p(:,:,jj),lowFilt);
            elseif divMode(jj,2) == 2
                p_f(:,:,jj) = p(:,:,jj)-imfilter(p(:,:,jj),lowFilt);
            else
                p_f(:,:,jj) = p(:,:,jj);
            end
        end
        spatial_out = [p_f(2:end-1,2:end-1,1) p_f(2:end-1,2:end-1,2); p_f(2:end-1,2:end-1,3) p_f(2:end-1,2:end-1,4)];
    else
        if filtMode == 1
            lowFilt = [0 1/8 0; 1/8 1/2 1/8; 0 1/8 0];
        elseif filtMode == 2
            lowFilt = 1/16*[1 2 1; 1 2 1; 1 2 1];
        elseif filtMode == 3
            lowFilt = 1/9*[1 1 1; 1 1 1; 1 1 1];
        elseif filtMode == 4
            lowFilt = fspecial('gaussian',gaussSize, std);
        end
        if sh_mode == 1
            spatial_out = imfilter(in_var,lowFilt);
        elseif sh_mode == 2
            spatial_out = in_var-imfilter(in_var,lowFilt);
        else
            spatial_out = in_var;
        end
    end
    
    if ii == 1
        temp_out = zeros(height,width);
    else
        temp_out = spatial_out - spatial_past;
    end    
    spatial_past = spatial_out;
    ONevents = temp_out>= thresh1_arr;
    OFFevents = temp_out<= thresh2_arr;
    outFrame(ONevents) = 255;
    outFrame(OFFevents) = 127;
    rgb_vid(:,:,:,ii) = zeros(height,width,3);
    rgb_vid(:,:,1,ii) = 255*ONevents;
    rgb_vid(:,:,2,ii) = 255*OFFevents;
    i_vid(:,:,ii) = in_var;
    s_vid(:,:,ii) = uint8(spatial_out);
    st_vid(:,:,ii) = uint8(outFrame);
end

if arrW == 1
    filtOut = VideoWriter('nofilt.avi');
    tempOut = VideoWriter('eventout_nofilt.avi');
    filtOut.FrameRate = 10;
    tempOut.FrameRate = 10;
    open(filtOut);
    open(tempOut);
    for ii = 1:size(in_dat,3)
        writeVideo(tempOut,st_vid(:,:,ii));
        writeVideo(filtOut,s_vid(:,:,ii));
    end
    close(tempOut);
    close(filtOut);
elseif arrW == 2
    frame = 30;
    figure(4);
    imagesc(st_vid(:,:,frame));
    colormap(gray);
    title('Spatiotemporal output, low pass filter (Gaussian), threshold  = I_{max}/20');
    saveas(gcf, '../figs/glpf_wdeadPix_satPix_st.png');
    
    figure(6);
    imagesc(s_vid(:,:,frame));
    colormap(gray);
    title('Spatial output, low pass filter (Gaussian)');
    saveas(gcf, '../figs/glpf_wdeadPix_satPix_s.png');
    
    figure(5);
    imagesc(i_vid(:,:,frame));
    colormap(gray);
    title('input with dead/saturated pixels');
    saveas(gcf, '../figs/glpf_wdeadPix_satPix_in.png');
end
% for ii = 1:nFrames
%     imagesc(rgb_vid(:,:,:,ii));
%     pause(1/10);
% end
fig = fig_show(i_vid, s_vid, st_vid, './output_videos/glpf_wdeadPix_satPix.mp4', figW);
